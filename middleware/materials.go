/*
 * Material Management
 *
 * Materials API
 *
 * API version: 2.0
 * Contact: kenny.chen@iii.org.tw
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package middleware

import (
	"encoding/json"
	"fmt"

	"material-management/db"
	"material-management/middleware/logic"

	"github.com/gorilla/schema"

	"material-management/models"
	"net/http"

	"github.com/gorilla/mux"
)

// func decoder(r *http.Request, i interface{}) interface{} {
// 	fmt.Printf("%+v\n", i) //empty interface

// 	err := json.NewDecoder(r.Body).Decode(&i)
// 	if err != nil {
// 		panic(err)
// 	}
// 	fmt.Printf("%+v\n", i)
// 	return i
// }

// 新增一筆物料ok
func MaterialPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	var material models.Material
	err := json.NewDecoder(r.Body).Decode(&material)
	if err != nil {
		rDecodeErr(w, err)
		return
	}
	if err := logic.AddMaterial(material); err != nil {
		rLogicErr(w, err)
		return
	}
}

//修改指定id物料的數量ok
func MaterialPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	//request container
	var mQuantity models.UpdateMaterialQuantity
	// decode the json request to user
	err := json.NewDecoder(r.Body).Decode(&mQuantity)
	if err != nil {
		rDecodeErr(w, err)
		return
	}

	// get the id from the request params, key is "id"
	params := mux.Vars(r)
	var material models.Material
	material.MaterialID = params["id"]

	//目前只會使用到material.quantity參數
	if err := logic.UpdateMaterial(material); err != nil {
		rLogicErr(w, err)
		return
	}
}

//取得最後物料的時間
func LatestMaterialsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	maxTimestamp, err := db.QueryInventoryLastTime()
	if err != nil {
		rLogicErr(w, err)
		return
	}
	json.NewEncoder(w).Encode(maxTimestamp)
}

// 取得所有物料資料 + 依照條件查詢
func MaterialsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// r.ParseForm()       //解析url传递的参数，对于POST则解析响应包的主体（request body）
	//注意:如果没有调用ParseForm方法，下面无法获取表单的数据
	if err := r.ParseForm(); err != nil {
		rLogicErr(w, err)
		return
	}

	filter := new(models.MaterialFilter)
	if err := schema.NewDecoder().Decode(filter, r.Form); err != nil {
		rLogicErr(w, err)
		return
	}
	fmt.Printf("MaterialsGet filter: %+v\n", filter)

	// fmt.Println(r.Form) //map
	// params := r.URL.Query()
	// //filter
	// page, _ := params["page"]
	// mid, _ := params["material_id"]
	// mn, _ := params["material_name"]
	// tid, _ := params["type_id"]
	// tn, _ := params["type_name"]
	// stockl, _ := params["stock_location"]

	// TODO handle page
	// log.Println(page)
	// log.Println(mid, mn, tid, tn, stockl)

	materials, err := db.QueryInventory(filter)
	if err != nil {
		rSQLErr(w, err)
		return
	}
	json.NewEncoder(w).Encode(materials)
}

// 依照條件查詢物料 先不做
func MaterialDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
